const http = require('http');

function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(body);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (error) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testModerationViaAPI() {
  try {
    console.log('üîç Test du syst√®me de mod√©ration via l\'API...');

    // 1. Test de connectivit√©
    console.log('\nüîå Test de connectivit√© API...');
    const categoriesResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/fails/categories',
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });

    if (categoriesResponse.status !== 200) {
      console.log(`‚ùå Le serveur API ne r√©pond pas correctement: ${categoriesResponse.status}`);
      return;
    }
    console.log('‚úÖ API accessible');

    // 2. Cr√©er un utilisateur de test pour l'authentification
    console.log('\nüë§ Cr√©ation d\'un utilisateur de test...');
    const timestamp = Date.now();
    const testUser = {
      email: `test-${timestamp}@example.com`,
      password: 'TestPassword123!',
      displayName: `TestUser${timestamp}`
    };

    const registerResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/auth/register',
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    }, testUser);

    if (registerResponse.status !== 201) {
      console.log(`‚ùå Erreur lors de la cr√©ation de l'utilisateur: ${registerResponse.status}`);
      console.log(registerResponse.data);
      return;
    }

    const token = registerResponse.data.token;
    console.log('‚úÖ Utilisateur cr√©√© et connect√©');

    // 3. R√©cup√©rer les fails publics avec le token
    console.log('\nüìù R√©cup√©ration des fails publics...');
    const failsResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/fails?limit=5',
      method: 'GET',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    if (failsResponse.status === 200) {
      const fails = failsResponse.data.fails || [];
      console.log(`‚úÖ ${fails.length} fails r√©cup√©r√©s`);
      
      fails.forEach((fail, index) => {
        console.log(`\nüóÇÔ∏è  Fail ${index + 1}:`);
        console.log(`   ID: ${fail.id}`);
        console.log(`   Titre: ${fail.title}`);
        console.log(`   Statut mod√©ration: ${fail.moderationStatus || 'null (pas de mod√©ration)'}`);
        console.log(`   Cr√©√© le: ${new Date(fail.createdAt).toLocaleString('fr-FR')}`);
        
        if (fail.moderationStatus === 'approved') {
          console.log(`   ‚ö†Ô∏è  Ce fail affichera "Contenu valid√© par mod√©ration"`);
        } else {
          console.log(`   ‚úÖ Ce fail n'affichera PAS le message de validation`);
        }
      });

      // Statistiques
      const withModeration = fails.filter(f => f.moderationStatus === 'approved').length;
      const withoutModeration = fails.filter(f => !f.moderationStatus).length;
      
      console.log(`\nüìä Statistiques:`);
      console.log(`   - Fails avec statut "approved": ${withModeration}`);
      console.log(`   - Fails sans mod√©ration: ${withoutModeration}`);
      
      if (withModeration === 0) {
        console.log(`\n‚úÖ EXCELLENT! Aucun fail n'affiche automatiquement le message de validation.`);
        console.log(`   Le probl√®me de mod√©ration automatique est R√âSOLU!`);
      } else {
        console.log(`\n‚ö†Ô∏è  PROBL√àME: ${withModeration} fail(s) affichent le message de validation alors qu'ils ne devraient pas.`);
      }

    } else {
      console.log(`‚ùå Erreur lors de la r√©cup√©ration des fails: ${failsResponse.status}`);
      console.log(failsResponse.data);
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

testModerationViaAPI();
