/**
 * üê≥ TEST DE COMMUNICATION DOCKER
 * ===============================
 * 
 * Script pour tester la communication frontend ‚Üí backend en environnement Docker
 */

const environment = {
  api: {
    baseUrl: 'http://localhost:3000/api'
  }
};

async function testDockerCommunication() {
  console.log('üê≥ TEST DE COMMUNICATION DOCKER');
  console.log('===============================\n');

  const baseUrl = environment.api.baseUrl;
  console.log(`üì° URL de base de l'API: ${baseUrl}\n`);

  try {
    // Test 1: Health Check Backend
    console.log('1Ô∏è‚É£ Test Health Check Backend Docker...');
    const healthResponse = await fetch(`${baseUrl.replace('/api', '')}/health`);
    const healthData = await healthResponse.json();
    console.log('‚úÖ Backend Docker:', healthData);
    console.log('');

    // Test 2: Test Frontend Docker
    console.log('2Ô∏è‚É£ Test Frontend Docker...');
    const frontendResponse = await fetch('http://localhost:8080', { 
      method: 'HEAD' 
    });
    console.log('‚úÖ Frontend Docker accessible:', {
      status: frontendResponse.status,
      server: frontendResponse.headers.get('server'),
      port: '8080'
    });
    console.log('');

    // Test 3: Test Base de donn√©es Docker
    console.log('3Ô∏è‚É£ Test Inscription (Backend + MySQL Docker)...');
    const registrationData = {
      email: `docker-test-${Date.now()}@example.com`,
      password: 'TestPassword123!',
      displayName: `DockerTest${Date.now()}`,
      birthDate: '1990-05-15',
      agreeToTerms: true,
      agreeToNewsletter: false
    };

    const registerResponse = await fetch(`${baseUrl}/../api/registration/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(registrationData)
    });

    if (registerResponse.ok) {
      const registerData = await registerResponse.json();
      console.log('‚úÖ Inscription via Docker r√©ussie:', {
        success: registerData.success,
        userId: registerData.user?.id,
        email: registerData.user?.email
      });
    } else {
      const errorData = await registerResponse.text();
      console.log('‚ùå √âchec inscription Docker:', registerResponse.status, errorData);
    }

    console.log('\nüéâ R√âSULTATS DOCKER');
    console.log('===================');
    console.log('‚úÖ Frontend Docker: http://localhost:8080');
    console.log('‚úÖ Backend Docker: http://localhost:3000');
    console.log('‚úÖ MySQL Docker: localhost:3307');
    console.log('‚úÖ Communication Frontend ‚Üî Backend op√©rationnelle');
    console.log('‚úÖ Stack Docker compl√®tement fonctionnelle');
    console.log('\nüöÄ PR√äT POUR LE D√âPLOIEMENT KIMSUFI !');

  } catch (error) {
    console.error('‚ùå Erreur de communication Docker:', error.message);
    console.log('\nüö® PROBL√àME DOCKER D√âTECT√â');
    console.log('===========================');
    console.log('‚ùå La communication Docker a √©chou√©');
    console.log('üí° V√©rifiez que tous les conteneurs sont d√©marr√©s');
  }
}

// Ex√©cution du test
testDockerCommunication();
