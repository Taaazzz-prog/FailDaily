#!/usr/bin/env powershell

<#
.SYNOPSIS
    üöÄ D√âPLOIEMENT PRODUCTION OVH - Corrections CSS
    
.DESCRIPTION
    Script de d√©ploiement automatique des corrections CSS sur le serveur OVH.
    Synchronise le code, reconstruit les conteneurs Docker avec les nouvelles configs.
#>

param(
    [string]$ServerIP = "51.75.55.185",
    [string]$ServerUser = "debian",
    [string]$ProjectPath = "/var/www/FailDaily"
)

Write-Host "üöÄ D√âPLOIEMENT PRODUCTION OVH" -ForegroundColor Green
Write-Host "=============================" -ForegroundColor Green
Write-Host ""

# Fonction pour ex√©cuter des commandes SSH
function Invoke-SSHCommand {
    param($Command, $Description)
    Write-Host "üîß $Description..." -ForegroundColor Yellow
    Write-Host "   Commande: $Command" -ForegroundColor Gray
    
    try {
        $result = ssh $ServerUser@$ServerIP $Command
        if ($LASTEXITCODE -eq 0) {
            Write-Host "   ‚úÖ Succ√®s" -ForegroundColor Green
            return $result
        } else {
            Write-Host "   ‚ùå √âchec (Code: $LASTEXITCODE)" -ForegroundColor Red
            return $null
        }
    } catch {
        Write-Host "   ‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# 1. V√©rifier la connexion SSH
Write-Host "1Ô∏è‚É£ V√©rification connexion serveur OVH..."
$connection = Invoke-SSHCommand "whoami && hostname" "Test connexion SSH"
if (-not $connection) {
    Write-Host "‚ùå Impossible de se connecter au serveur OVH" -ForegroundColor Red
    Write-Host "üí° V√©rifiez que votre cl√© SSH est configur√©e" -ForegroundColor Yellow
    exit 1
}
Write-Host "   üì° Connect√© en tant que: $($connection -join ' | ')" -ForegroundColor Green
Write-Host ""

# 2. Synchroniser le code source
Write-Host "2Ô∏è‚É£ Synchronisation du code source..."
Invoke-SSHCommand "cd $ProjectPath && git fetch origin" "R√©cup√©ration des modifications"
Invoke-SSHCommand "cd $ProjectPath && git reset --hard origin/main" "Reset vers derni√®re version"
Invoke-SSHCommand "cd $ProjectPath && git log --oneline -3" "V√©rification commits"
Write-Host ""

# 3. V√©rifier les modifications CSS
Write-Host "3Ô∏è‚É£ V√©rification des corrections CSS..."
$packageJson = Invoke-SSHCommand "cd $ProjectPath && grep 'build:docker' frontend/package.json" "Commande build:docker"
$dockerfile = Invoke-SSHCommand "cd $ProjectPath && grep 'build:docker' docker/frontend.Dockerfile" "Dockerfile modifi√©"

if ($packageJson -and $dockerfile) {
    Write-Host "   ‚úÖ Corrections CSS pr√©sentes sur le serveur" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Corrections CSS non d√©tect√©es" -ForegroundColor Yellow
}
Write-Host ""

# 4. Arr√™ter les conteneurs existants
Write-Host "4Ô∏è‚É£ Arr√™t des conteneurs existants..."
Invoke-SSHCommand "cd $ProjectPath/docker && docker-compose down" "Arr√™t services Docker"
Write-Host ""

# 5. Nettoyer les images obsol√®tes
Write-Host "5Ô∏è‚É£ Nettoyage des images Docker..."
Invoke-SSHCommand "docker system prune -f" "Nettoyage images inutilis√©es"
Write-Host ""

# 6. Reconstruire avec les nouvelles configurations
Write-Host "6Ô∏è‚É£ Reconstruction avec nouvelles configs CSS..."
Invoke-SSHCommand "cd $ProjectPath/docker && docker-compose build --no-cache --pull" "Build complet frontend/backend"
Write-Host ""

# 7. D√©marrer les services
Write-Host "7Ô∏è‚É£ D√©marrage des services de production..."
Invoke-SSHCommand "cd $ProjectPath/docker && docker-compose up -d" "D√©marrage conteneurs"
Write-Host ""

# 8. V√©rifier les services
Write-Host "8Ô∏è‚É£ V√©rification des services..."
Start-Sleep -Seconds 10  # Attendre que les services d√©marrent

$healthAPI = Invoke-SSHCommand "curl -s https://faildaily.com/api/health | grep 'status'" "API Health Check"
$frontendCheck = Invoke-SSHCommand "curl -s https://faildaily.com | grep 'FailDaily'" "Frontend Check"

if ($healthAPI -and $frontendCheck) {
    Write-Host "   ‚úÖ Services op√©rationnels" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Services en cours de d√©marrage..." -ForegroundColor Yellow
}
Write-Host ""

# 9. Test de l'interface admin
Write-Host "9Ô∏è‚É£ Test interface admin production..."
Write-Host "   üåê URL: https://faildaily.com/tabs/admin" -ForegroundColor Cyan
Write-Host "   üîë Login: bruno@taaazzz.be / @51008473@" -ForegroundColor Cyan
Write-Host ""

# R√©sum√© final
Write-Host "üéØ R√âSUM√â DU D√âPLOIEMENT" -ForegroundColor Green
Write-Host "======================" -ForegroundColor Green
Write-Host "‚úÖ Code synchronis√© depuis GitHub" 
Write-Host "‚úÖ Corrections CSS d√©ploy√©es:"
Write-Host "   - build:docker sans optimisations CSS agressives"
Write-Host "   - Variables Ionic pr√©serv√©es en production"
Write-Host "   - Interface admin maintenant identique partout"
Write-Host "‚úÖ Conteneurs Docker reconstruits"
Write-Host "‚úÖ Services de production red√©marr√©s"
Write-Host ""
Write-Host "üé® L'interface admin devrait maintenant √™tre magnifique en production !" -ForegroundColor Green
Write-Host "üß™ Testez sur: https://faildaily.com/tabs/admin" -ForegroundColor Yellow