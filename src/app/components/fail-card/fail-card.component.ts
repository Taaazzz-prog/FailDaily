import { Component, Input, OnInit, OnDestroy, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IonButton, IonIcon, ViewWillEnter, ToastController, PopoverController } from '@ionic/angular/standalone';
import { Fail } from '../../models/fail.model';
import { FailService } from '../../services/fail.service';
import { TimeAgoPipe } from '../../pipes/time-ago.pipe';
import { FailCategory } from '../../models/enums';
import { Haptics, ImpactStyle } from '@capacitor/haptics';
import { SupabaseService } from '../../services/supabase.service';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-fail-card',
  templateUrl: './fail-card.component.html',
  styleUrls: ['./fail-card.component.scss'],
  imports: [CommonModule, IonButton, IonIcon, TimeAgoPipe]
})
export class FailCardComponent implements OnInit, ViewWillEnter {
  @Input() fail!: Fail;
  userReactions: string[] = []; // Array des r√©actions de l'utilisateur

  private encouragementMessages = [
    'Chaque √©chec est un pas vers la r√©ussite ! üí™',
    'Tu as eu le courage de le partager ! üåü',
    'On grandit √† travers nos erreurs ! üå±',
    'Bravo pour ton honn√™tet√© ! ‚ù§Ô∏è',
    'Tu n\'es pas seul(e) dans cette aventure ! ü§ù',
    'L\'imperfection, c\'est la perfection ! ‚ú®'
  ];

  constructor(
    private failService: FailService,
    private toastController: ToastController,
    private cdr: ChangeDetectorRef
  ) { }

  async ngOnInit() {
    // R√©cup√©rer la r√©action actuelle de l'utilisateur pour ce fail
    await this.loadUserReaction();
  }

  ionViewWillEnter() {
    // Recharger la r√©action utilisateur √† chaque fois que la vue devient active
    this.loadUserReaction();
  }

  private async loadUserReaction() {
    try {
      this.userReactions = await this.failService.getUserReactionsForFail(this.fail.id);
    } catch (error) {
      console.log('Erreur lors du chargement des r√©actions utilisateur:', error);
      this.userReactions = [];
    }
  }

  async onCourage() {
    if (this.userReactions.includes('courage')) {
      return;
    }

    try {
      await Haptics.impact({ style: ImpactStyle.Light });
    } catch (hapticError) {
      // Ignore les erreurs de haptic
    }

    try {
      // 1. Envoyer √† la base
      await this.failService.addReaction(this.fail.id, 'courage');

      // 2. R√©cup√©rer la VRAIE valeur de la base
      const updatedFail = await this.failService.getFailById(this.fail.id);
      if (updatedFail) {
        this.fail.reactions = updatedFail.reactions;
      }

      // 3. Recharger les r√©actions utilisateur
      await this.loadUserReaction();
      this.cdr.detectChanges();
    } catch (error) {
      console.log('Erreur lors de la r√©action courage:', error);
    }
  }

  async onLaugh() {
    if (this.userReactions.includes('laugh')) {
      return;
    }

    try {
      await Haptics.impact({ style: ImpactStyle.Light });
    } catch (hapticError) {
      // Ignore les erreurs de haptic
    }

    try {
      // 1. Envoyer √† la base
      await this.failService.addReaction(this.fail.id, 'laugh');

      // 2. R√©cup√©rer la VRAIE valeur de la base
      const updatedFail = await this.failService.getFailById(this.fail.id);
      if (updatedFail) {
        this.fail.reactions = updatedFail.reactions;
      }

      // 3. Recharger les r√©actions utilisateur
      await this.loadUserReaction();
      this.cdr.detectChanges();
    } catch (error) {
      console.log('Erreur lors de la r√©action laugh:', error);
    }
  }

  async onEmpathy() {
    if (this.userReactions.includes('empathy')) {
      return;
    }

    try {
      await Haptics.impact({ style: ImpactStyle.Medium });
    } catch (hapticError) {
      // Ignore les erreurs de haptic
    }

    try {
      // 1. Envoyer √† la base
      await this.failService.addReaction(this.fail.id, 'empathy');

      // 2. R√©cup√©rer la VRAIE valeur de la base
      const updatedFail = await this.failService.getFailById(this.fail.id);
      if (updatedFail) {
        this.fail.reactions = updatedFail.reactions;
      }

      // 3. Recharger les r√©actions utilisateur
      await this.loadUserReaction();
      this.cdr.detectChanges();
    } catch (error) {
      console.log('Erreur lors de la r√©action empathy:', error);
    }
  }

  async onSupport() {
    if (this.userReactions.includes('support')) {
      return;
    }

    try {
      await Haptics.impact({ style: ImpactStyle.Medium });
    } catch (hapticError) {
      // Ignore les erreurs de haptic
    }

    try {
      // 1. Envoyer √† la base
      await this.failService.addReaction(this.fail.id, 'support');

      // 2. R√©cup√©rer la VRAIE valeur de la base
      const updatedFail = await this.failService.getFailById(this.fail.id);
      if (updatedFail) {
        this.fail.reactions = updatedFail.reactions;
      }

      // 3. Recharger les r√©actions utilisateur
      await this.loadUserReaction();
      this.cdr.detectChanges();
    } catch (error) {
      console.log('Erreur lors de la r√©action support:', error);
    }
  }

  /**
   * Recharge les donn√©es du fail depuis la base de donn√©es
   */
  private async refreshFailData() {
    try {
      console.log(`üîÑ Refreshing data for fail ${this.fail.id}...`);
      console.log(`üîÑ Current reactions:`, this.fail.reactions);

      // Attendre un peu pour que la base de donn√©es soit √† jour
      await new Promise(resolve => setTimeout(resolve, 500));

      const updatedFail = await this.failService.getFailById(this.fail.id);
      if (updatedFail) {
        console.log(`‚úÖ Updated reactions from DB:`, updatedFail.reactions);

        // Mettre √† jour les compteurs de r√©actions
        this.fail.reactions = { ...updatedFail.reactions };

        console.log(`‚úÖ Local reactions after update:`, this.fail.reactions);

        // Forcer la d√©tection de changement
        this.cdr.detectChanges();
      }

      // Recharger les r√©actions de l'utilisateur
      await this.loadUserReaction();
    } catch (error) {
      console.log('‚ùå Erreur lors du refresh des donn√©es du fail:', error);
    }
  }

  isReactionActive(reactionType: string): boolean {
    return this.userReactions.includes(reactionType);
  }

  getCategoryColor(category: FailCategory): string {
    const colors: { [key: string]: string } = {
      [FailCategory.COURAGE]: 'primary',
      [FailCategory.HUMOUR]: 'secondary',
      [FailCategory.ENTRAIDE]: 'tertiary',
      [FailCategory.PERSEVERANCE]: 'success',
      [FailCategory.SPECIAL]: 'warning',
      [FailCategory.TRAVAIL]: 'danger',
      [FailCategory.SPORT]: 'medium',
      [FailCategory.CUISINE]: 'dark',
      [FailCategory.TRANSPORT]: 'light',
      [FailCategory.TECHNOLOGIE]: 'secondary',
      [FailCategory.RELATIONS]: 'primary',
      [FailCategory.FINANCES]: 'tertiary',
      [FailCategory.BRICOLAGE]: 'success',
      [FailCategory.APPRENTISSAGE]: 'danger',
      [FailCategory.SANTE]: 'warning',
      [FailCategory.VOYAGE]: 'medium',
      [FailCategory.COMMUNICATION]: 'dark'
    };
    return colors[category] || 'medium';
  }
}
