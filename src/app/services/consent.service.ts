import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { ComprehensiveLoggerService } from './comprehensive-logger.service';

export interface ConsentRecord {
    id: string;
    userId: string;
    documentType: 'terms' | 'privacy' | 'age-verification' | 'moderation';
    documentVersion: string;
    acceptedAt: Date;
    ipAddress?: string;
    userAgent?: string;
}

@Injectable({
    providedIn: 'root'
})
export class ConsentService {
    private consentStatusSubject = new BehaviorSubject<boolean>(false);
    public consentStatus$ = this.consentStatusSubject.asObservable();

    constructor(private logger: ComprehensiveLoggerService) { }

    /**
     * V√©rifie si l'utilisateur a accept√© tous les documents obligatoires
     */
    async hasValidConsent(userId: string): Promise<boolean> {
        // TODO: V√©rifier en base de donn√©es
        // Pour l'instant, on simule avec le localStorage
        const consent = localStorage.getItem(`user_consent_${userId}`);
        return consent === 'accepted';
    }

    /**
     * Enregistre l'acceptation des documents obligatoires
     */
    async recordConsent(
        userId: string,
        documentsAccepted: string[],
        additionalData?: { ipAddress?: string; userAgent?: string }
    ): Promise<boolean> {
        try {
            const consentRecord = {
                userId,
                documentsAccepted,
                acceptedAt: new Date().toISOString(),
                ...additionalData
            };

            // Logger l'acceptation du consentement
            await this.logger.logActivity({
                eventType: 'consent_accepted',
                eventCategory: 'system',
                action: 'legal_consent',
                title: 'Consentement l√©gal accept√©',
                description: `L'utilisateur a accept√© les documents l√©gaux: ${documentsAccepted.join(', ')}`,
                resourceType: 'consent',
                targetUserId: userId,
                payload: {
                    documentsAccepted,
                    ipAddress: additionalData?.ipAddress,
                    userAgent: additionalData?.userAgent
                }
            });

            // TODO: Sauvegarder en base de donn√©es via Supabase
            // Pour l'instant, on utilise le localStorage
            localStorage.setItem(`user_consent_${userId}`, 'accepted');
            localStorage.setItem(`user_consent_details_${userId}`, JSON.stringify(consentRecord));

            this.consentStatusSubject.next(true);
            return true;
        } catch (error) {
            console.error('Erreur lors de l\'enregistrement du consentement:', error);

            // Logger l'erreur de consentement
            await this.logger.logActivity({
                eventType: 'consent_error',
                eventCategory: 'system',
                action: 'legal_consent_failed',
                title: 'Erreur consentement l√©gal',
                description: `Erreur lors de l'enregistrement du consentement pour l'utilisateur`,
                resourceType: 'consent',
                targetUserId: userId,
                success: false,
                errorMessage: error instanceof Error ? error.message : 'Erreur inconnue',
                payload: { documentsAccepted }
            });

            return false;
        }
    }

    /**
     * R√©cup√®re l'historique des consentements pour un utilisateur
     */
    async getConsentHistory(userId: string): Promise<ConsentRecord[]> {
        // TODO: R√©cup√©rer depuis la base de donn√©es
        // Pour l'instant, simulation avec localStorage
        const details = localStorage.getItem(`user_consent_details_${userId}`);
        if (details) {
            return [JSON.parse(details)];
        }
        return [];
    }

    /**
     * R√©voque le consentement (pour la suppression de compte)
     */
    async revokeConsent(userId: string): Promise<boolean> {
        try {
            // TODO: Marquer comme r√©voqu√© en base de donn√©es
            localStorage.removeItem(`user_consent_${userId}`);
            localStorage.removeItem(`user_consent_details_${userId}`);

            this.consentStatusSubject.next(false);
            return true;
        } catch (error) {
            console.error('Erreur lors de la r√©vocation du consentement:', error);
            return false;
        }
    }

    /**
     * V√©rifie l'√¢ge et la n√©cessit√© d'autorisation parentale
     */
    checkAgeRequirements(birthDate: Date): {
        canRegister: boolean;
        needsParentalConsent: boolean;
        reason?: string;
    } {
        const today = new Date();
        let age = today.getFullYear() - birthDate.getFullYear();
        const monthDiff = today.getMonth() - birthDate.getMonth();

        // Corriger l'√¢ge si l'anniversaire n'a pas encore eu lieu cette ann√©e
        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
            age--;
        }

        console.log(`üéÇ Calcul d'√¢ge: ${age} ans (n√© le ${birthDate.toDateString()})`);

        if (age < 13) {
            return {
                canRegister: false,
                needsParentalConsent: false,
                reason: 'L\'√¢ge minimum requis est de 13 ans conform√©ment au RGPD et COPPA.'
            };
        } else if (age >= 13 && age < 16) {
            return {
                canRegister: true,
                needsParentalConsent: true,
                reason: 'Une autorisation parentale est requise pour les utilisateurs de 13 √† 16 ans.'
            };
        } else {
            return {
                canRegister: true,
                needsParentalConsent: false
            };
        }
    }

    /**
     * G√©n√®re un email d'autorisation parentale
     */
    generateParentalConsentEmail(
        parentEmail: string,
        childName: string,
        childAge: number
    ): string {
        const consentLink = `https://faildaily.app/parental-consent?token=xxx`; // TODO: G√©n√©rer un vrai token

        return `
      Bonjour,
      
      Votre enfant ${childName} (${childAge} ans) souhaite cr√©er un compte sur l'application FailDaily.
      
      FailDaily est une application de partage et de soutien communautaire o√π les utilisateurs peuvent partager leurs exp√©riences d'√©chec de mani√®re bienveillante.
      
      Conform√©ment au RGPD, votre autorisation est requise pour les mineurs de 13 √† 16 ans.
      
      Pour autoriser la cr√©ation de ce compte, cliquez sur le lien suivant :
      ${consentLink}
      
      Vous pouvez √©galement consulter nos documents l√©gaux :
      - Conditions g√©n√©rales d'utilisation : https://faildaily.app/legal-document/terms-of-service
      - Politique de confidentialit√© : https://faildaily.app/legal-document/privacy-policy
      - Charte de mod√©ration : https://faildaily.app/legal-document/moderation-charter
      
      Si vous n'√™tes pas le parent/tuteur de ${childName}, veuillez ignorer cet email.
      
      L'√©quipe FailDaily
      parents@faildaily.app
    `;
    }
}
