import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { environment } from '../../environments/environment';
import { User } from '../models/user.model';
import { HttpAuthService } from './http-auth.service';

/**
 * Service de transition entre Supabase et MySQL
 * Ce service fait le pont entre l'ancien syst√®me Supabase et le nouveau syst√®me MySQL
 */
@Injectable({
  providedIn: 'root'
})
export class NewAuthService {
  private currentUserSubject = new BehaviorSubject<User | null>(null);
  public currentUser$ = this.currentUserSubject.asObservable();

  constructor(
    private httpAuthService: HttpAuthService,
    private http: HttpClient
  ) {
    console.log('üîÑ NewAuthService: Service de transition Supabase ‚Üí MySQL initialis√©');
    this.initializeFromHttpAuth();
  }

  private initializeFromHttpAuth(): void {
    // Synchroniser avec le service HTTP principal
    this.httpAuthService.currentUser$.subscribe(user => {
      this.currentUserSubject.next(user);
    });
  }

  // M√©thodes de compatibilit√© avec l'ancien AuthService Supabase
  async signUp(email: string, password: string, displayName: string): Promise<{ success: boolean; user?: User; error?: string }> {
    try {
      const result = await this.httpAuthService.register({
        email,
        password,
        displayName
      });

      return result;
    } catch (error: any) {
      return {
        success: false,
        error: error.message || 'Erreur lors de l\'inscription'
      };
    }
  }

  async signIn(email: string, password: string): Promise<{ success: boolean; user?: User; error?: string }> {
    try {
      const result = await this.httpAuthService.login({
        email,
        password
      });

      return result;
    } catch (error: any) {
      return {
        success: false,
        error: error.message || 'Erreur lors de la connexion'
      };
    }
  }

  async signOut(): Promise<void> {
    await this.httpAuthService.logout();
  }

  getCurrentUser(): User | null {
    return this.httpAuthService.getCurrentUser();
  }

  getCurrentUserSync(): User | null {
    return this.httpAuthService.getCurrentUserSync();
  }

  isAuthenticated(): boolean {
    return this.httpAuthService.isAuthenticated();
  }

  // Observable pour la compatibilit√©
  get isAuthenticated$(): Observable<boolean> {
    return this.currentUser$.pipe(
      map(user => !!user)
    );
  }

  // M√©thodes de migration des donn√©es
  async migrateFromSupabase(): Promise<boolean> {
    try {
      console.log('üîÑ D√©but de la migration des donn√©es Supabase ‚Üí MySQL');

      // V√©rifier si des donn√©es Supabase existent encore
      const supabaseData = this.getSupabaseData();
      if (!supabaseData) {
        console.log('‚ÑπÔ∏è Aucune donn√©e Supabase √† migrer');
        return true;
      }

      // Migrer les donn√©es utilisateur
      await this.migrateUserData(supabaseData);

      // Nettoyer les donn√©es Supabase
      this.cleanupSupabaseData();

      console.log('‚úÖ Migration Supabase ‚Üí MySQL termin√©e');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de la migration:', error);
      return false;
    }
  }

  private getSupabaseData(): any {
    try {
      // R√©cup√©rer les donn√©es stock√©es par l'ancien service Supabase
      const supabaseSession = localStorage.getItem('sb-faildaily-auth-token');
      const supabaseUser = localStorage.getItem('sb-faildaily-user');
      
      if (supabaseSession && supabaseUser) {
        return {
          session: JSON.parse(supabaseSession),
          user: JSON.parse(supabaseUser)
        };
      }
      return null;
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des donn√©es Supabase:', error);
      return null;
    }
  }

  private async migrateUserData(supabaseData: any): Promise<void> {
    try {
      // Extraire les informations utilisateur de Supabase
      const supabaseUser = supabaseData.user;
      
      // V√©rifier si l'utilisateur existe d√©j√† dans MySQL
      const existingUser = await this.checkUserExists(supabaseUser.email);
      
      if (!existingUser) {
        console.log('üë§ Migration des donn√©es utilisateur:', supabaseUser.email);
        
        // Cr√©er le compte dans MySQL avec les donn√©es Supabase
        await this.createMigratedUser({
          email: supabaseUser.email,
          displayName: supabaseUser.user_metadata?.displayName || supabaseUser.email.split('@')[0],
          supabaseId: supabaseUser.id,
          createdAt: supabaseUser.created_at
        });
      } else {
        console.log('‚ÑπÔ∏è Utilisateur d√©j√† migr√©:', supabaseUser.email);
      }
    } catch (error) {
      console.error('‚ùå Erreur migration donn√©es utilisateur:', error);
      throw error;
    }
  }

  private async checkUserExists(email: string): Promise<boolean> {
    try {
      const response: any = await this.http.get(`${environment.api.baseUrl}/auth/check-user`, {
        params: { email }
      }).toPromise();

      return response.exists === true;
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur v√©rification utilisateur existant:', error);
      return false;
    }
  }

  private async createMigratedUser(userData: any): Promise<void> {
    try {
      await this.http.post(`${environment.api.baseUrl}/auth/migrate-user`, userData).toPromise();
      console.log('‚úÖ Utilisateur migr√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation utilisateur migr√©:', error);
      throw error;
    }
  }

  private cleanupSupabaseData(): void {
    try {
      // Supprimer les donn√©es Supabase du localStorage
      const supabaseKeys = [
        'sb-faildaily-auth-token',
        'sb-faildaily-user',
        'sb-faildaily-session',
        'supabase.auth.token'
      ];

      supabaseKeys.forEach(key => {
        localStorage.removeItem(key);
      });

      console.log('üßπ Donn√©es Supabase nettoy√©es du localStorage');
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur lors du nettoyage des donn√©es Supabase:', error);
    }
  }

  // M√©thodes de diagnostic
  async testMysqlConnection(): Promise<boolean> {
    try {
      const response: any = await this.http.get(`${environment.api.baseUrl}/health`).toPromise();
      return response.success === true;
    } catch (error) {
      console.error('‚ùå Test connexion MySQL √©chou√©:', error);
      return false;
    }
  }

  async getMigrationStatus(): Promise<any> {
    try {
      const response = await this.http.get(`${environment.api.baseUrl}/migration/status`).toPromise();
      return response;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration statut migration:', error);
      return { migrated: false, error: error };
    }
  }

  // M√©thodes utilitaires pour la transition
  isUsingSupabase(): boolean {
    return !!localStorage.getItem('sb-faildaily-auth-token');
  }

  isUsingMysql(): boolean {
    return !!localStorage.getItem('auth_token');
  }

  getAuthenticationMode(): 'supabase' | 'mysql' | 'none' {
    if (this.isUsingMysql()) return 'mysql';
    if (this.isUsingSupabase()) return 'supabase';
    return 'none';
  }

  // M√©thode pour forcer la migration si n√©cessaire
  async forceMigration(): Promise<boolean> {
    try {
      console.log('üîÑ Migration forc√©e d√©marr√©e');
      
      // D√©connecter de Supabase si connect√©
      if (this.isUsingSupabase()) {
        this.cleanupSupabaseData();
      }

      // Rediriger vers la page de connexion MySQL
      return true;
    } catch (error) {
      console.error('‚ùå Erreur migration forc√©e:', error);
      return false;
    }
  }

  // √âv√©nements de transition
  onMigrationComplete(): Observable<boolean> {
    return new Observable(observer => {
      this.currentUser$.subscribe(user => {
        if (user && this.isUsingMysql() && !this.isUsingSupabase()) {
          observer.next(true);
          observer.complete();
        }
      });
    });
  }
}