# ===============================================
# üöÄ FAILDAILY PRODUCTION - DOCKER COMPOSE
# ===============================================
# Configuration optimis√©e pour serveur OVH Linux

networks:
  faildaily-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql-data:
    driver: local
  nginx-cache:
    driver: local
  app-logs:
    driver: local

services:
  # üóÑÔ∏è Base de donn√©es MySQL
  database:
    image: mysql:8.0.35
    container_name: faildaily-db-prod
    restart: unless-stopped
    
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    
    volumes:
      - mysql-data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    ports:
      - "127.0.0.1:3307:3306"
    
    networks:
      faildaily-network:
        ipv4_address: 172.20.0.10
    
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=256M
      --max-connections=200
      --slow-query-log=1
      --long-query-time=2
    
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # üîß Backend API
  backend:
    build:
      context: ../../backend-api
      dockerfile: ../docker/production/backend.prod.Dockerfile
      args:
        NODE_ENV: production
    
    container_name: faildaily-backend-prod
    restart: unless-stopped
    
    environment:
      NODE_ENV: production
      PORT: ${BACKEND_INTERNAL_PORT}
      DB_HOST: database
      DB_PORT: ${DB_INTERNAL_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      CORS_ORIGIN: ${CORS_ORIGIN}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX}
    
    volumes:
      - app-logs:/app/logs
      - ${UPLOADS_VOLUME_PATH}:/app/uploads
    
    ports:
      - "127.0.0.1:3001:3000"
    
    networks:
      faildaily-network:
        ipv4_address: 172.20.0.20
    
    depends_on:
      database:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üåê Frontend Angular/Ionic + Nginx
  frontend:
    build:
      context: ../../frontend
      dockerfile: ../docker/production/frontend.prod.Dockerfile
      args:
        NODE_ENV: production
    
    container_name: faildaily-frontend-prod
    restart: unless-stopped
    
    volumes:
      - nginx-cache:/var/cache/nginx
      - app-logs:/var/log/nginx
    
    ports:
      - "80:8080"
      - "443:8080"
    
    networks:
      faildaily-network:
        ipv4_address: 172.20.0.30
    
    depends_on:
      backend:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # üìä Monitoring (optionnel)
  watchtower:
    image: containrrr/watchtower:latest
    container_name: faildaily-watchtower
    restart: unless-stopped
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_POLL_INTERVAL: 3600
      WATCHTOWER_INCLUDE_STOPPED: true
      WATCHTOWER_INCLUDE_RESTARTING: true
    
    networks:
      - faildaily-network
    
    command: --interval 3600 --cleanup
