#!/usr/bin/env pwsh
# ====================================================================
# üê≥ Status Script pour FailDaily Docker - V√©rifications rapides
# ====================================================================

Write-Host "=====================================================================" -ForegroundColor Cyan
Write-Host "üê≥ FAILDAILY DOCKER - STATUS CHECK" -ForegroundColor Yellow
Write-Host "=====================================================================" -ForegroundColor Cyan

# V√©rifier si Docker est en cours d'ex√©cution
Write-Host "`nüîç V√©rification de Docker..." -ForegroundColor Blue
try {
    docker version --format '{{.Server.Version}}' | Out-Null
    Write-Host "‚úÖ Docker est en cours d'ex√©cution" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n'est pas en cours d'ex√©cution" -ForegroundColor Red
    exit 1
}

# V√©rifier les conteneurs
Write-Host "`nüì¶ Status des conteneurs:" -ForegroundColor Blue
$containers = docker ps --filter "name=faildaily" --format "table {{.Names}}`t{{.Status}}`t{{.Ports}}"
if ($containers.Count -gt 1) {
    $containers | Format-Table -AutoSize
    Write-Host "‚úÖ Tous les conteneurs sont actifs" -ForegroundColor Green
} else {
    Write-Host "‚ùå Aucun conteneur FailDaily trouv√©" -ForegroundColor Red
}

# Tester les services
Write-Host "`nüåê Test des services:" -ForegroundColor Blue

# Test Backend API
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3001/api/health" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Backend API (http://localhost:3001) - OK" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Backend API (http://localhost:3001) - ERREUR" -ForegroundColor Red
}

# Test Frontend
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8081" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Frontend (http://localhost:8081) - OK" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Frontend (http://localhost:8081) - ERREUR" -ForegroundColor Red
}

# Test Database
try {
    $result = docker exec faildaily_db mysql -u root -pfaildaily_root_password_local -e "SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema='faildaily';" 2>$null
    $tableCount = ($result -split "`n" | Select-String -Pattern "^\d+$").ToString()
    if ([int]$tableCount -ge 26) {
        Write-Host "‚úÖ Base de donn√©es MySQL (localhost:3308) - OK ($tableCount tables)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Base de donn√©es MySQL - Tables manquantes (trouv√©: $tableCount, attendu: 26+)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Base de donn√©es MySQL (localhost:3308) - ERREUR" -ForegroundColor Red
}

Write-Host "`n=====================================================================" -ForegroundColor Cyan
Write-Host "üéØ ACC√àS RAPIDE:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Frontend: http://localhost:8081" -ForegroundColor White
Write-Host "   ‚Ä¢ API:      http://localhost:3001" -ForegroundColor White
Write-Host "   ‚Ä¢ MySQL:    localhost:3308" -ForegroundColor White
Write-Host "=====================================================================" -ForegroundColor Cyan
