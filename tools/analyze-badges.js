/**
 * Script pour analyser en d√©tail la structure des badges
 */

const API_BASE = 'http://localhost:8000/api';

async function analyzeBadgeStructure() {
    console.log('üîç Analyse d√©taill√©e de la structure des badges...\n');

    try {
        // Connexion
        const loginResponse = await fetch(`${API_BASE}/auth/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                email: 'bruno@taaazzz.be',
                password: '@51008473@'
            })
        });

        const loginData = await loginResponse.json();
        const token = loginData.token;

        // R√©cup√©rer tous les badges
        const allBadgesResponse = await fetch(`${API_BASE}/badges/available`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });

        const allBadgesData = await allBadgesResponse.json();
        const allBadges = allBadgesData.badges || [];

        console.log(`üìä Total badges: ${allBadges.length}\n`);

        // Grouper par cat√©gorie
        const categoriesCount = {};
        allBadges.forEach(badge => {
            const category = badge.category || 'undefined';
            categoriesCount[category] = (categoriesCount[category] || 0) + 1;
        });

        console.log('üìã R√©partition par cat√©gorie:');
        Object.entries(categoriesCount).forEach(([category, count]) => {
            console.log(`  ${category}: ${count} badges`);
        });

        console.log('\nüèÜ Premiers badges de chaque cat√©gorie:');
        const categoriesSample = {};
        allBadges.forEach(badge => {
            const category = badge.category || 'undefined';
            if (!categoriesSample[category]) {
                categoriesSample[category] = [];
            }
            if (categoriesSample[category].length < 3) {
                categoriesSample[category].push(badge);
            }
        });

        Object.entries(categoriesSample).forEach(([category, badges]) => {
            console.log(`\n  üìÇ ${category.toUpperCase()}:`);
            badges.forEach(badge => {
                console.log(`    - ${badge.name} (${badge.rarity}) - ${badge.description}`);
                if (badge.requirements) {
                    console.log(`      Requis: ${badge.requirements.type} = ${badge.requirements.value}`);
                }
            });
        });

        // Test de la logique "Prochains d√©fis"
        console.log('\nüéØ Test de la logique "Prochains d√©fis"...');
        
        // Simuler quelques fails pour d√©clencher des badges
        console.log('\nüìù Pour tester la correction, vous devriez:');
        console.log('1. Cr√©er quelques fails sur http://localhost:8000/tabs/post-fail');
        console.log('2. Aller sur http://localhost:8000/tabs/badges');
        console.log('3. V√©rifier la section "Prochains d√©fis !" en bas');
        console.log('4. Seuls les badges avec du progr√®s (> 0) devraient appara√Ætre');
        console.log('5. Les badges d√©j√† d√©bloqu√©s ne devraient PAS appara√Ætre');

    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
    }
}

analyzeBadgeStructure();