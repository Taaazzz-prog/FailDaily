/**
 * SCRIPT PRINCIPAL DE VALIDATION BADGES
 * ====================================
 * 
 * Usage:
 * node validate-badges.js                           // Test complet avec nouvel utilisateur
 * node validate-badges.js bruno@taaazzz.be          // Test avec utilisateur existant
 * node validate-badges.js --quick bruno@taaazzz.be  // Test rapide "Prochains d√©fis" seulement
 */

const BadgeTestingSystem = require('./badge-system-complete-test');
const NextChallengesValidator = require('./next-challenges-validator');

async function main() {
  const args = process.argv.slice(2);
  
  try {
    // Test rapide "Prochains d√©fis" seulement
    if (args[0] === '--quick' && args[1]) {
      console.log('‚ö° MODE RAPIDE: Validation "Prochains d√©fis" uniquement');
      
      const validator = new NextChallengesValidator();
      await validator.quickTest(args[1]);
      return;
    }
    
    // Test complet
    console.log('üèÜ MODE COMPLET: Tests complets du syst√®me de badges');
    
    let userId = null;
    
    // Si un email est fourni
    if (args[0] && args[0].includes('@')) {
      const { executeQuery } = require('../src/config/database');
      
      console.log(`üîç Recherche utilisateur: ${args[0]}`);
      const user = await executeQuery(`SELECT id FROM users WHERE email = ?`, [args[0]]);
      
      if (user.length === 0) {
        console.error(`‚ùå Utilisateur non trouv√©: ${args[0]}`);
        process.exit(1);
      }
      
      userId = user[0].id;
      console.log(`‚úÖ Utilisateur trouv√©: ${userId}`);
    }
    
    // Lancer les tests complets
    const tester = new BadgeTestingSystem();
    const results = await tester.runCompleteTest(userId);
    
    // Test sp√©cifique "Prochains d√©fis"
    console.log('\n' + '='.repeat(60));
    console.log('üéØ TEST SP√âCIFIQUE: "PROCHAINS D√âFIS"');
    console.log('='.repeat(60));
    
    const validator = new NextChallengesValidator();
    const testUserId = userId || results.testUserId;
    
    if (!testUserId) {
      console.error('‚ùå Aucun ID utilisateur disponible pour la validation');
      return;
    }
    
    const validation = await validator.validateNextChallenges(testUserId);
    
    // R√©sum√© final
    console.log('\n' + '='.repeat(60));
    console.log('üìã R√âSUM√â FINAL');
    console.log('='.repeat(60));
    
    const overallSuccess = results.errors.length === 0 && validation.isValid;
    
    if (overallSuccess) {
      console.log('üéâ TOUS LES TESTS R√âUSSIS!');
      console.log('‚úÖ Syst√®me de badges enti√®rement fonctionnel');
      console.log('‚úÖ "Prochains d√©fis" fonctionne correctement');
    } else {
      console.log('‚ö†Ô∏è PROBL√àMES D√âTECT√âS:');
      
      if (results.errors.length > 0) {
        console.log(`‚ùå ${results.errors.length} erreurs dans le syst√®me de badges`);
      }
      
      if (!validation.isValid) {
        console.log('‚ùå Probl√®me avec "Prochains d√©fis"');
      }
    }
    
    // Proposer nettoyage si utilisateur de test cr√©√©
    if (!args[0] && testUserId) {
      console.log('\nüßπ Nettoyage des donn√©es de test...');
      await tester.cleanup(testUserId);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { main };