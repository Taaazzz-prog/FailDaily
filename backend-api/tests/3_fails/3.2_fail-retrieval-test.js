/**
 * üìñ TEST 3.2 - R√âCUP√âRATION DE FAILS
 * ==================================
 * 
 * Teste la r√©cup√©ration des fails avec pagination et filtres
 */

const { API_CONFIG, TEST_UTILS, DEFAULT_HEADERS } = require('../0_test-config');

async function testFailRetrieval() {
  TEST_UTILS.log('üîç', 'D√©but test r√©cup√©ration fails...');
  
  let success = true;
  const results = {
    userCreated: false,
    failsCreated: 0,
    getAllFails: false,
    getFailById: false,
    publicOnlyFilter: false,
    pagination: false,
    categoryFilter: false,
    unauthorizedAccess: false,
    errors: []
  };

  const registerUrl = API_CONFIG.baseUrl + API_CONFIG.endpoints.auth.register;
  const failsUrl = API_CONFIG.baseUrl + API_CONFIG.endpoints.fails.create;
  const getFailsUrl = API_CONFIG.baseUrl + API_CONFIG.endpoints.fails.getAll;

  let authToken = null;
  let userId = null;
  let createdFailIds = [];

  try {
    // 1. Cr√©er un utilisateur et plusieurs fails de test
    TEST_UTILS.log('üë§', 'Pr√©paration donn√©es de test...');
    const testEmail = TEST_UTILS.generateTestEmail();
    const testPassword = 'password123';
    
    const userData = {
      email: testEmail,
      password: testPassword,
      displayName: 'Test Retrieval User'
    };

    const registerResponse = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify(userData)
    });

    if (registerResponse.status === 201) {
      const registerData = await registerResponse.json();
      results.userCreated = true;
      userId = registerData.user.id;
      authToken = registerData.token;
      TEST_UTILS.log('‚úÖ', 'Utilisateur cr√©√©');
    } else {
      results.errors.push('Impossible de cr√©er utilisateur de test');
      success = false;
      return { success, results };
    }

    // Cr√©er plusieurs fails de test
    const testFails = [
      { title: '√âchec public 1', description: 'Premier √©chec public', category: 'personnel', isPublic: true },
      { title: '√âchec priv√© 1', description: 'Premier √©chec priv√©', category: 'professionnel', isPublic: false },
      { title: '√âchec public 2', description: 'Deuxi√®me √©chec public', category: 'relationnel', isPublic: true },
      { title: '√âchec public 3', description: 'Troisi√®me √©chec public', category: 'personnel', isPublic: true }
    ];

    TEST_UTILS.log('üìù', 'Cr√©ation de fails de test...');
    for (const failData of testFails) {
      const createResponse = await fetch(failsUrl, {
        method: 'POST',
        headers: {
          ...DEFAULT_HEADERS,
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(failData)
      });

      if (createResponse.status === 201) {
        const data = await createResponse.json();
        createdFailIds.push(data.fail.id);
        results.failsCreated++;
      }
    }

    TEST_UTILS.log('‚úÖ', `${results.failsCreated} fails cr√©√©s pour les tests`);

    // 2. Test r√©cup√©ration sans authentification (devrait √™tre rejet√©e)
    TEST_UTILS.log('üö´', 'Test r√©cup√©ration sans authentification...');
    const noAuthResponse = await fetch(getFailsUrl, {
      method: 'GET',
      headers: DEFAULT_HEADERS
    });

    if (noAuthResponse.status === 401) {
      TEST_UTILS.log('‚úÖ', 'Acc√®s sans auth correctement rejet√© - Compte obligatoire');
      results.publicOnlyFilter = true; // Renomm√© pour la logique "auth required"
    } else {
      results.errors.push(`Acc√®s sans auth devrait √™tre rejet√©: ${noAuthResponse.status}`);
    }

    // 3. Test r√©cup√©ration avec authentification (tous les fails publics visibles)
    TEST_UTILS.log('üìñ', 'Test r√©cup√©ration avec authentification...');
    const getAllResponse = await fetch(getFailsUrl, {
      method: 'GET',
      headers: {
        ...DEFAULT_HEADERS,
        'Authorization': `Bearer ${authToken}`
      }
    });

    if (getAllResponse.status === 200) {
      const allFailsData = await getAllResponse.json();
      
      if (Array.isArray(allFailsData.fails) && allFailsData.fails.length >= 3) {
        results.getAllFails = true;
        TEST_UTILS.log('‚úÖ', `R√©cup√©ration r√©ussie: ${allFailsData.fails.length} fails trouv√©s`);
        
        // V√©rifier que tous les fails retourn√©s sont publics (pour un utilisateur standard)
        const publicFails = allFailsData.fails.filter(fail => fail.isPublic === true);
        const privateFails = allFailsData.fails.filter(fail => fail.isPublic === false && fail.user_id === userId);
        
        // Un utilisateur connect√© voit : tous les fails publics + ses propres fails priv√©s
        if (publicFails.length > 0) {
          TEST_UTILS.log('‚úÖ', `Fails publics visibles: ${publicFails.length}`);
        }
        if (privateFails.length > 0) {
          TEST_UTILS.log('‚úÖ', `Ses propres fails priv√©s visibles: ${privateFails.length}`);
        }
        
        // V√©rifier l'anonymat : les donn√©es d'auteur ne doivent pas √™tre expos√©es
        const firstFail = allFailsData.fails[0];
        if (firstFail && (!firstFail.author_name || !firstFail.author_avatar)) {
          TEST_UTILS.log('‚úÖ', 'Anonymat pr√©serv√© - Pas de donn√©es auteur expos√©es');
        }
      } else {
        results.errors.push('Format de r√©ponse invalide pour getAllFails');
      }
    } else {
      results.errors.push(`R√©cup√©ration fails avec auth √©chou√©e: ${getAllResponse.status}`);
    }

    // 4. Test r√©cup√©ration fail par ID
    if (createdFailIds.length > 0) {
      TEST_UTILS.log('üéØ', 'Test r√©cup√©ration fail par ID...');
      const failId = createdFailIds[0];
      const getByIdUrl = `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.fails.getById}/${failId}`;
      
      const getByIdResponse = await fetch(getByIdUrl, {
        method: 'GET',
        headers: {
          ...DEFAULT_HEADERS,
          'Authorization': `Bearer ${authToken}` // Auth requise aussi pour r√©cup√©ration par ID
        }
      });

      if (getByIdResponse.status === 200) {
        const failData = await getByIdResponse.json();
        
        if (failData.fail && failData.fail.id === failId) {
          results.getFailById = true;
          TEST_UTILS.log('‚úÖ', `Fail r√©cup√©r√© par ID: ${failData.fail.title}`);
          
          // V√©rifier l'anonymat sur la r√©cup√©ration par ID aussi
          if (!failData.fail.author_name || !failData.fail.author_avatar) {
            TEST_UTILS.log('‚úÖ', 'Anonymat pr√©serv√© sur r√©cup√©ration par ID');
          }
        } else {
          results.errors.push('Format de r√©ponse invalide pour getFailById');
        }
      } else {
        results.errors.push(`R√©cup√©ration fail par ID √©chou√©e: ${getByIdResponse.status}`);
      }
    }

    // 5. Test pagination
    TEST_UTILS.log('üìÑ', 'Test pagination...');
    const paginationUrl = `${getFailsUrl}?page=1&limit=2`;
    
    const paginationResponse = await fetch(paginationUrl, {
      method: 'GET',
      headers: {
        ...DEFAULT_HEADERS,
        'Authorization': `Bearer ${authToken}` // Auth requise
      }
    });

    if (paginationResponse.status === 200) {
      const paginationData = await paginationResponse.json();
      
      if (paginationData.fails && paginationData.fails.length <= 2 && 
          paginationData.pagination) {
        results.pagination = true;
        TEST_UTILS.log('‚úÖ', `Pagination fonctionne: ${paginationData.fails.length} r√©sultats, page ${paginationData.pagination.currentPage}`);
      } else {
        results.errors.push('Pagination ne fonctionne pas correctement');
      }
    } else {
      results.errors.push(`Test pagination √©chou√©: ${paginationResponse.status}`);
    }

    // 6. Test filtre par cat√©gorie
    TEST_UTILS.log('üè∑Ô∏è', 'Test filtre par cat√©gorie...');
    const categoryUrl = `${getFailsUrl}?category=personnel`;
    
    const categoryResponse = await fetch(categoryUrl, {
      method: 'GET',
      headers: {
        ...DEFAULT_HEADERS,
        'Authorization': `Bearer ${authToken}` // Auth requise
      }
    });

    if (categoryResponse.status === 200) {
      const categoryData = await categoryResponse.json();
      
      // V√©rifier que tous les fails retourn√©s sont de la cat√©gorie 'personnel'
      const allPersonnel = categoryData.fails.every(fail => fail.category === 'personnel');
      if (allPersonnel && categoryData.fails.length > 0) {
        results.categoryFilter = true;
        TEST_UTILS.log('‚úÖ', `Filtre cat√©gorie fonctionne: ${categoryData.fails.length} fails personnels`);
      } else if (categoryData.fails.length === 0) {
        TEST_UTILS.log('‚ÑπÔ∏è', 'Aucun fail personnel trouv√© (normal si base vide)');
        results.categoryFilter = true;
      }
    } else {
      results.errors.push(`Test filtre cat√©gorie √©chou√©: ${categoryResponse.status}`);
    }

    // 7. Test visibilit√© des fails priv√©s personnels
    TEST_UTILS.log('üîê', 'Test r√©cup√©ration avec authentification...');
    const authGetResponse = await fetch(getFailsUrl, {
      method: 'GET',
      headers: {
        ...DEFAULT_HEADERS,
        'Authorization': `Bearer ${authToken}`
      }
    });

    if (authGetResponse.status === 200) {
      const authData = await authGetResponse.json();
      
      // Devrait inclure les fails priv√©s de l'utilisateur
      const userFails = authData.fails.filter(fail => fail.user_id === userId);
      const privateUserFails = userFails.filter(fail => !fail.isPublic);
      
      if (privateUserFails.length > 0) {
        TEST_UTILS.log('‚úÖ', `Fails priv√©s inclus avec auth: ${privateUserFails.length}`);
      }
    }

    // 7. Test acc√®s non autoris√© (sans token)
    TEST_UTILS.log('üö´', 'Test acc√®s non autoris√© sans authentification...');
    const unauthorizedUrl = `${getFailsUrl}`;
    
    const unauthorizedResponse = await fetch(unauthorizedUrl, {
      method: 'GET',
      headers: DEFAULT_HEADERS // Pas de token d'auth
    });

    if (unauthorizedResponse.status === 401) {
      results.unauthorizedAccess = true;
      TEST_UTILS.log('‚úÖ', 'Protection acc√®s non autoris√© fonctionne - 401 sans token');
    } else {
      results.errors.push(`Acc√®s non autoris√© devrait retourner 401, re√ßu: ${unauthorizedResponse.status}`);
    }

    // 8. Test formats de r√©ponse avec authentification
    TEST_UTILS.log('üìã', 'V√©rification formats de r√©ponse...');
    const formatResponse = await fetch(getFailsUrl, {
      method: 'GET',
      headers: {
        ...DEFAULT_HEADERS,
        'Authorization': `Bearer ${authToken}` // Auth requise pour tous les acc√®s
      }
    });

    if (formatResponse.status === 200) {
      const formatData = await formatResponse.json();
      
      // V√©rifier la structure attendue
      const hasRequiredFields = formatData.fails && 
                               Array.isArray(formatData.fails) &&
                               (formatData.fails.length === 0 || 
                                formatData.fails[0].hasOwnProperty('id') &&
                                formatData.fails[0].hasOwnProperty('title') &&
                                formatData.fails[0].hasOwnProperty('user_id'));
      
      if (hasRequiredFields) {
        results.formatValidation = true;
        TEST_UTILS.log('‚úÖ', 'Format de r√©ponse correct');
      } else {
        results.errors.push('Format de r√©ponse incorrect');
      }
    } else {
      results.errors.push(`V√©rification format √©chou√©e: ${formatResponse.status}`);
    }

  } catch (error) {
    TEST_UTILS.log('‚ùå', `Erreur g√©n√©rale: ${error.message}`);
    results.errors.push(`Erreur r√©seau: ${error.message}`);
    success = false;
  }

  // R√©sultats
  console.log('\nüìã R√âSULTATS TEST 3.2 - R√âCUP√âRATION FAILS');
  console.log('==========================================');
  console.log(`Utilisateur cr√©√©: ${results.userCreated ? '‚úÖ OK' : '‚ùå √âCHEC'}`);
  console.log(`Fails cr√©√©s: ${results.failsCreated}/4`);
  console.log(`R√©cup√©ration tous (auth): ${results.getAllFails ? '‚úÖ OK' : '‚ùå √âCHEC'}`);
  console.log(`R√©cup√©ration par ID (auth): ${results.getFailById ? '‚úÖ OK' : '‚ùå √âCHEC'}`);
  console.log(`Pagination (auth): ${results.pagination ? '‚úÖ OK' : '‚ùå √âCHEC'}`);
  console.log(`Filtre cat√©gorie (auth): ${results.categoryFilter ? '‚úÖ OK' : '‚ùå √âCHEC'}`);
  console.log(`Protection acc√®s sans auth: ${results.unauthorizedAccess ? '‚úÖ OK' : '‚ùå √âCHEC'}`);
  console.log(`Format de r√©ponse: ${results.formatValidation ? '‚úÖ OK' : '‚ùå √âCHEC'}`);
  
  if (results.errors.length > 0) {
    console.log('\n‚ùå ERREURS:');
    results.errors.forEach(error => console.log(`   - ${error}`));
  }
  
  const allTestsPassed = results.userCreated && results.failsCreated >= 3 && 
                        results.getAllFails && results.getFailById && 
                        results.pagination && results.categoryFilter &&
                        results.unauthorizedAccess && results.formatValidation;
  
  console.log(`\nüéØ STATUT: ${allTestsPassed ? '‚úÖ SUCC√àS - Mod√®le acc√®s authentifi√© valid√©' : '‚ùå √âCHEC'}\n`);
  
  return { success: allTestsPassed, results };
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  testFailRetrieval()
    .then(({ success }) => process.exit(success ? 0 : 1))
    .catch(error => {
      console.error('üí• Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = testFailRetrieval;
