/**
 * üîê TEST 2.1 - INSCRIPTION COMPL√àTE AVEC VALIDATION D'√ÇGE
 * ========================================================
 * 
 * Test complet de l'inscription avec tous les cas de validation d'√¢ge :
 * - < 13 ans : inscription bloqu√©e
 * - 13-16 ans : autorisation parentale requise
 * - 17+ ans : inscription directe
 * 
 * Inclut √©galement :
 * - V√©rification unicit√© email/pseudo
 * - Validation des champs obligatoires
 * - Gestion des erreurs
 */

const { API_CONFIG, DEFAULT_HEADERS, TEST_UTILS, fetch } = require('../0_test-config');

async function testCompleteRegistration() {
  console.log('\nüîê === TEST 2.1 - Inscription Compl√®te avec Validation d\'√Çge ===');
  
  const results = {
    // Tests de base
    validRegistrationAdult: false,
    emailUniqueness: false,
    displayNameUniqueness: false,
    requiredFields: false,
    termsValidation: false,
    responseFormat: false,
    
    // Tests sp√©cifiques √† l'√¢ge
    ageVerificationUnder13: false,
    ageVerification13to16: false,
    ageVerificationAdult: false,
    parentalConsentRequired: false,
    minorTokenHandling: false,
    
    // Tests d'int√©gration
    displayNameGeneration: false,
    parentEmailValidation: false
  };

  const errors = [];
  const baseUrl = API_CONFIG.baseUrl;
  const registerUrl = `${baseUrl}/api/registration/register`;
  const checkEmailUrl = `${baseUrl}/api/registration/check-email`;
  const checkDisplayNameUrl = `${baseUrl}/api/registration/check-display-name`;

  try {
    console.log('\nüìã === PHASE 1: Tests de validation de base ===');
    
    // ========================================
    // TEST 1: Champs obligatoires
    // ========================================
    console.log('  ‚úì Test champs obligatoires...');
    const missingFieldsResponse = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        email: 'incomplete@test.com'
        // Champs manquants intentionnellement
      })
    });

    if (missingFieldsResponse.status === 400) {
      results.requiredFields = true;
      console.log('    ‚úÖ Validation champs obligatoires fonctionne');
    } else {
      errors.push(`Champs manquants devraient √™tre rejet√©s: ${missingFieldsResponse.status}`);
    }

    // ========================================
    // TEST 2: Validation des CGU
    // ========================================
    console.log('  ‚úì Test acceptation CGU obligatoires...');
    const noTermsResponse = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        email: TEST_UTILS.generateTestEmail(),
        password: 'TestPassword123!',
        displayName: 'TestUserNoTerms' + Date.now(),
        birthDate: '1990-01-01',
        agreeToTerms: false, // CGU non accept√©es
        agreeToNewsletter: false
      })
    });

    if (noTermsResponse.status === 400) {
      results.termsValidation = true;
      console.log('    ‚úÖ Validation CGU obligatoires fonctionne');
    } else {
      errors.push(`CGU devraient √™tre obligatoires: ${noTermsResponse.status}`);
    }

    console.log('\nüë∂ === PHASE 2: Tests de validation d\'√¢ge ===');
    
    // ========================================
    // TEST 3: √Çge < 13 ans (INTERDIT)
    // ========================================
    console.log('  ‚úì Test √¢ge < 13 ans (doit √™tre rejet√©)...');
    const under13Response = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        email: TEST_UTILS.generateTestEmail(),
        password: 'TestPassword123!',
        displayName: 'Enfant9ans' + Date.now(),
        birthDate: '2015-01-01', // 9 ans
        agreeToTerms: true,
        agreeToNewsletter: false
      })
    });

    if (under13Response.status === 400) {
      const under13Error = await under13Response.json();
      if (under13Error.code === 'AGE_RESTRICTION' && under13Error.message.includes('13 ans')) {
        results.ageVerificationUnder13 = true;
        console.log('    ‚úÖ Interdiction < 13 ans fonctionne correctement');
        console.log(`    üìù Message: "${under13Error.message}"`);
      } else {
        errors.push(`Message d'erreur incorrect pour < 13 ans: ${under13Error.message}`);
      }
    } else {
      errors.push(`√Çge < 13 ans devrait √™tre rejet√© avec code 400: ${under13Response.status}`);
    }

    // ========================================
    // TEST 4: √Çge 13-16 ans (AUTORISATION PARENTALE)
    // ========================================
    console.log('  ‚úì Test √¢ge 13-16 ans (autorisation parentale requise)...');
    const minor15Response = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        email: TEST_UTILS.generateTestEmail(),
        password: 'TestPassword123!',
        displayName: 'Mineur15ans' + Date.now(),
        birthDate: '2009-01-01', // 15 ans
        agreeToTerms: true,
        agreeToNewsletter: false,
        parentEmail: 'parent@exemple.com'
      })
    });

    if (minor15Response.status === 201) {
      const minorData = await minor15Response.json();
      if (minorData.requiresParentalConsent && !minorData.token) {
        results.ageVerification13to16 = true;
        results.parentalConsentRequired = true;
        results.minorTokenHandling = true;
        console.log('    ‚úÖ Gestion mineur 13-16 ans correcte');
        console.log(`    üìù Message: "${minorData.message}"`);
        console.log(`    üë• Utilisateur cr√©√©: ${minorData.user.displayName} (${minorData.user.age} ans)`);
        console.log('    üîí Aucun token fourni (correct pour mineur)');
        console.log(`    üìß Status: ${minorData.user.status}`);
      } else {
        errors.push(`Mineur devrait n√©cessiter autorisation parentale sans token`);
      }
    } else {
      const minorError = await minor15Response.json();
      errors.push(`Inscription mineur 13-16 ans √©chou√©e: ${minor15Response.status} - ${minorError.message}`);
    }

    // ========================================
    // TEST 5: √Çge adulte 17+ ans (INSCRIPTION DIRECTE)
    // ========================================
    console.log('  ‚úì Test √¢ge adulte 17+ ans (inscription directe)...');
    const adultData = {
      email: TEST_UTILS.generateTestEmail(),
      password: 'TestPassword123!',
      displayName: 'Adulte25ans' + Date.now(),
      birthDate: '1999-01-01', // 25 ans
      agreeToTerms: true,
      agreeToNewsletter: false
    };

    const adultResponse = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify(adultData)
    });

    if (adultResponse.status === 201) {
      const adultResult = await adultResponse.json();
      if (adultResult.token && adultResult.user && !adultResult.requiresParentalConsent) {
        results.validRegistrationAdult = true;
        results.ageVerificationAdult = true;
        results.responseFormat = true;
        console.log('    ‚úÖ Inscription adulte directe r√©ussie');
        console.log(`    üë§ Utilisateur: ${adultResult.user.displayName}`);
        console.log(`    üîë Token fourni: ${adultResult.token.substring(0, 20)}...`);
        console.log(`    üìÖ Date cr√©ation: ${adultResult.user.createdAt}`);
      } else {
        errors.push(`Adulte devrait avoir inscription compl√®te avec token`);
      }
    } else {
      const adultError = await adultResponse.json();
      errors.push(`Inscription adulte √©chou√©e: ${adultResponse.status} - ${adultError.message}`);
    }

    console.log('\nüîß === PHASE 3: Tests d\'unicit√© et validation ===');
    
    // ========================================
    // TEST 6: Unicit√© email
    // ========================================
    console.log('  ‚úì Test unicit√© email...');
    const duplicateEmailResponse = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        ...adultData,
        displayName: 'DifferentName' + Date.now()
      })
    });

    if (duplicateEmailResponse.status === 409) {
      results.emailUniqueness = true;
      console.log('    ‚úÖ Validation unicit√© email fonctionne');
    } else {
      errors.push(`Email dupliqu√© devrait √™tre rejet√©: ${duplicateEmailResponse.status}`);
    }

    // ========================================
    // TEST 7: Unicit√© display_name
    // ========================================
    console.log('  ‚úì Test unicit√© display_name...');
    const duplicateNameResponse = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        email: TEST_UTILS.generateTestEmail(),
        password: 'TestPassword123!',
        displayName: adultData.displayName, // M√™me nom que l'adulte cr√©√©
        birthDate: '1995-01-01',
        agreeToTerms: true,
        agreeToNewsletter: false
      })
    });

    if (duplicateNameResponse.status === 409) {
      results.displayNameUniqueness = true;
      console.log('    ‚úÖ Validation unicit√© display_name fonctionne');
    } else {
      errors.push(`Display name dupliqu√© devrait √™tre rejet√©: ${duplicateNameResponse.status}`);
    }

    // ========================================
    // TEST 8: V√©rification API display_name
    // ========================================
    console.log('  ‚úì Test API v√©rification display_name...');
    const checkNameResponse = await fetch(`${checkDisplayNameUrl}?displayName=TestUser`, {
      method: 'GET',
      headers: DEFAULT_HEADERS
    });

    if (checkNameResponse.status === 200) {
      const checkResult = await checkNameResponse.json();
      if (checkResult.success && typeof checkResult.available === 'boolean') {
        results.displayNameGeneration = true;
        console.log('    ‚úÖ API v√©rification display_name fonctionne');
        console.log(`    üìã Disponible: ${checkResult.available}`);
      }
    } else {
      errors.push(`API check display_name √©chou√©e: ${checkNameResponse.status}`);
    }

    console.log('\nüß™ === PHASE 4: Tests d\'int√©gration avanc√©s ===');
    
    // ========================================
    // TEST 9: Mineur avec email parent invalide
    // ========================================
    console.log('  ‚úì Test email parent invalide...');
    const invalidParentEmailResponse = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        email: TEST_UTILS.generateTestEmail(),
        password: 'TestPassword123!',
        displayName: 'MineurEmailInvalide' + Date.now(),
        birthDate: '2010-01-01', // 14 ans
        agreeToTerms: true,
        agreeToNewsletter: false,
        parentEmail: 'email-invalide'
      })
    });

    // Soit accept√© avec email nettoy√©, soit rejet√© pour email invalide
    if (invalidParentEmailResponse.status === 201 || invalidParentEmailResponse.status === 400) {
      results.parentEmailValidation = true;
      console.log('    ‚úÖ Validation email parent g√©r√©e');
    } else {
      errors.push(`Email parent invalide mal g√©r√©: ${invalidParentEmailResponse.status}`);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
    errors.push(`Erreur g√©n√©rale: ${error.message}`);
  }

  // ========================================
  // RAPPORT FINAL
  // ========================================
  console.log('\nüìä === RAPPORT DE TEST COMPLET ===');
  
  const totalTests = Object.keys(results).length;
  const passedTests = Object.values(results).filter(Boolean).length;
  const successRate = ((passedTests / totalTests) * 100).toFixed(1);
  
  console.log(`\nüìà R√©sultats: ${passedTests}/${totalTests} tests r√©ussis (${successRate}%)`);
  console.log('\nüìã D√©tail des tests:');
  
  // Tests de validation de base
  console.log('\nüîπ Validation de base:');
  console.log(`  Champs obligatoires: ${results.requiredFields ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Validation CGU: ${results.termsValidation ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Format de r√©ponse: ${results.responseFormat ? '‚úÖ' : '‚ùå'}`);
  
  // Tests de validation d'√¢ge
  console.log('\nüîπ Validation d\'√¢ge:');
  console.log(`  Blocage < 13 ans: ${results.ageVerificationUnder13 ? '‚úÖ' : '‚ùå'}`);
  console.log(`  D√©tection 13-16 ans: ${results.ageVerification13to16 ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Inscription adulte: ${results.ageVerificationAdult ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Autorisation parentale: ${results.parentalConsentRequired ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Gestion token mineur: ${results.minorTokenHandling ? '‚úÖ' : '‚ùå'}`);
  
  // Tests d'unicit√©
  console.log('\nüîπ Unicit√© et validation:');
  console.log(`  Unicit√© email: ${results.emailUniqueness ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Unicit√© display_name: ${results.displayNameUniqueness ? '‚úÖ' : '‚ùå'}`);
  console.log(`  API display_name: ${results.displayNameGeneration ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Validation email parent: ${results.parentEmailValidation ? '‚úÖ' : '‚ùå'}`);
  
  // Tests d'inscription compl√®te
  console.log('\nüîπ Inscriptions compl√®tes:');
  console.log(`  Inscription adulte valide: ${results.validRegistrationAdult ? '‚úÖ' : '‚ùå'}`);

  // Erreurs rencontr√©es
  if (errors.length > 0) {
    console.log('\nüö® Erreurs d√©tect√©es:');
    errors.forEach((error, index) => {
      console.log(`  ${index + 1}. ${error}`);
    });
  }

  // Statut final
  const criticalTests = [
    'ageVerificationUnder13',
    'ageVerification13to16', 
    'ageVerificationAdult',
    'parentalConsentRequired',
    'minorTokenHandling',
    'validRegistrationAdult'
  ];
  
  const criticalPassed = criticalTests.every(test => results[test]);
  
  console.log(`\nüéØ STATUT FINAL: ${criticalPassed ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}`);
  console.log('\nüí° Note: Ce test valide le processus complet d\'inscription avec:');
  console.log('   - Validation d\'√¢ge stricte (< 13 ans bloqu√©)');
  console.log('   - Gestion autorisation parentale (13-16 ans)');
  console.log('   - Inscription directe adultes (17+ ans)');
  console.log('   - S√©curit√© token (pas de token pour mineurs)');
  console.log('   - Unicit√© email/pseudo');
  console.log('   - Validation des CGU\n');
  
  return { 
    success: criticalPassed, 
    results, 
    errors,
    passedTests,
    totalTests,
    successRate: parseFloat(successRate)
  };
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  testCompleteRegistration()
    .then(result => {
      process.exit(result.success ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = { testCompleteRegistration };

