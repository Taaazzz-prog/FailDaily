const { API_CONFIG, DEFAULT_HEADERS, TEST_UTILS, fetch } = require('../0_test-config');

async function testRegistration() {
  console.log('\nüîê === TEST 2.1 - Inscription Utilisateur (Simplifi√©) ===');
  
  const results = {
    validRegistrationAdult: false,
    emailUniqueness: false,
    displayNameUniqueness: false,
    requiredFields: false,
    ageVerification: false,
    termsValidation: false,
    responseFormat: false
  };

  const errors = [];
  const baseUrl = API_CONFIG.baseUrl;
  const registerUrl = `${baseUrl}/api/registration/register`;

  try {
    // Test 1 : Inscription valide d'un adulte
    console.log('  ‚úì Test inscription valide...');
    const validUserData = {
      email: TEST_UTILS.generateTestEmail(),
      password: 'TestPassword123!',
      displayName: 'TestUser' + Date.now(),
      birthDate: '1990-01-01', // Adulte
      agreeToTerms: true,
      agreeToNewsletter: false
    };

    const validResponse = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify(validUserData)
    });

    if (validResponse.status === 201) {
      const userData = await validResponse.json();
      if (userData.token && userData.user) {
        results.validRegistrationAdult = true;
        results.responseFormat = true;
        console.log('    ‚úÖ Inscription adulte r√©ussie');
      }
    } else {
      errors.push(`Inscription adulte √©chou√©e: ${validResponse.status} - ${await validResponse.text()}`);
    }

    // Test 2 : Email d√©j√† utilis√©
    console.log('  ‚úì Test unicit√© email...');
    const duplicateEmailResponse = await fetch(registerUrl, {
      method: 'POST', 
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        ...validUserData,
        displayName: 'DifferentName' + Date.now()
      })
    });

    if (duplicateEmailResponse.status === 409) {
      results.emailUniqueness = true;
      console.log('    ‚úÖ D√©tection email dupliqu√© fonctionne');
    } else {
      errors.push(`Email dupliqu√© devrait √™tre rejet√©: ${duplicateEmailResponse.status}`);
    }

    // Test 3 : Display name d√©j√† utilis√©
    console.log('  ‚úì Test unicit√© display name...');
    const duplicateNameResponse = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        email: TEST_UTILS.generateTestEmail(),
        password: 'TestPassword123!',
        displayName: validUserData.displayName, // M√™me nom
        birthDate: '1990-01-01',
        agreeToTerms: true,
        agreeToNewsletter: false
      })
    });

    if (duplicateNameResponse.status === 409) {
      results.displayNameUniqueness = true;
      console.log('    ‚úÖ D√©tection nom dupliqu√© fonctionne');
    } else {
      errors.push(`Display name dupliqu√© devrait √™tre rejet√©: ${duplicateNameResponse.status}`);
    }

    // Test 4 : Champs obligatoires
    console.log('  ‚úì Test champs obligatoires...');
    const missingFieldsResponse = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        email: 'incomplete@test.com'
        // Champs manquants
      })
    });

    if (missingFieldsResponse.status === 400) {
      results.requiredFields = true;
      console.log('    ‚úÖ Validation champs obligatoires fonctionne');
    } else {
      errors.push(`Champs manquants devraient √™tre rejet√©s: ${missingFieldsResponse.status}`);
    }

    // Test 5 : √Çge mineur (< 13 ans)
    console.log('  ‚úì Test √¢ge minimum...');
    const underageResponse = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        email: TEST_UTILS.generateTestEmail(),
        password: 'TestPassword123!',
        displayName: 'UnderageUser' + Date.now(),
        birthDate: '2015-01-01', // 9 ans
        agreeToTerms: true,
        agreeToNewsletter: false
      })
    });

    if (underageResponse.status === 400 || underageResponse.status === 403) {
      results.ageVerification = true;
      console.log('    ‚úÖ Restriction √¢ge minimum fonctionne');
    } else {
      errors.push(`√Çge < 13 ans devrait √™tre rejet√©: ${underageResponse.status}`);
    }

    // Test 6 : CGU obligatoires
    console.log('  ‚úì Test acceptation CGU...');
    const noTermsResponse = await fetch(registerUrl, {
      method: 'POST',
      headers: DEFAULT_HEADERS,
      body: JSON.stringify({
        email: TEST_UTILS.generateTestEmail(),
        password: 'TestPassword123!',
        displayName: 'NoTermsUser' + Date.now(),
        birthDate: '1990-01-01',
        agreeToTerms: false, // Pas d'acceptation
        agreeToNewsletter: false
      })
    });

    if (noTermsResponse.status === 400) {
      results.termsValidation = true;
      console.log('    ‚úÖ Validation CGU fonctionne');
    } else {
      errors.push(`CGU devrait √™tre obligatoire: ${noTermsResponse.status}`);
    }

  } catch (error) {
    console.error('‚ùå Erreur durant tests inscription:', error.message);
    errors.push(`Erreur test: ${error.message}`);
  }

  // Calcul du succ√®s en ne consid√©rant que les flags bool√©ens
  const boolKeys = [
    'validRegistrationAdult',
    'emailUniqueness',
    'displayNameUniqueness',
    'requiredFields',
    'ageVerification',
    'termsValidation',
    'responseFormat'
  ];
  const success = boolKeys.every(k => results[k] === true);
  
  console.log(`\nüìä R√©sultat inscription: ${success ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}`);
  
  return {
    success,
    results: { ...results, errors }
  };
}

module.exports = { testRegistration };
