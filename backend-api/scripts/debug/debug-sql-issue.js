const { executeQuery } = require('./src/config/database');

async function debugSQLIssue() {
  try {
    console.log('üîç Test progressif pour identifier le probl√®me SQL...\n');
    
    // Test 1: Requ√™te la plus simple possible
    console.log('1Ô∏è‚É£ Test requ√™te ultra-simple...');
    try {
      const test1 = await executeQuery('SELECT COUNT(*) as total FROM fails');
      console.log(`‚úÖ Test 1 r√©ussi: ${test1[0].total} fails`);
    } catch (e) {
      console.log(`‚ùå Test 1 √©chou√©: ${e.message}`);
      return;
    }
    
    // Test 2: Avec LIMIT et param√®tres
    console.log('\n2Ô∏è‚É£ Test avec LIMIT et param√®tres...');
    try {
      const test2 = await executeQuery('SELECT id, title FROM fails LIMIT ?, ?', [0, 2]);
      console.log(`‚úÖ Test 2 r√©ussi: ${test2.length} r√©sultats`);
    } catch (e) {
      console.log(`‚ùå Test 2 √©chou√©: ${e.message}`);
      return;
    }
    
    // Test 3: Avec JOIN users/profiles
    console.log('\n3Ô∏è‚É£ Test avec JOIN users/profiles...');
    try {
      const test3 = await executeQuery(`
        SELECT f.id, f.title, u.email, p.display_name
        FROM fails f
        JOIN users u ON f.user_id = u.id
        JOIN profiles p ON u.id = p.user_id
        LIMIT ?, ?`, [0, 2]);
      console.log(`‚úÖ Test 3 r√©ussi: ${test3.length} r√©sultats`);
    } catch (e) {
      console.log(`‚ùå Test 3 √©chou√©: ${e.message}`);
      return;
    }
    
    // Test 4: Avec LEFT JOIN fail_moderation
    console.log('\n4Ô∏è‚É£ Test avec LEFT JOIN fail_moderation...');
    try {
      const test4 = await executeQuery(`
        SELECT f.id, f.title, fm.status
        FROM fails f
        LEFT JOIN fail_moderation fm ON fm.fail_id = f.id
        LIMIT ?, ?`, [0, 2]);
      console.log(`‚úÖ Test 4 r√©ussi: ${test4.length} r√©sultats`);
      test4.forEach(row => {
        console.log(`  - Fail ${row.id}: status = ${row.status}`);
      });
    } catch (e) {
      console.log(`‚ùå Test 4 √©chou√©: ${e.message}`);
      return;
    }
    
    // Test 5: Avec WHERE sur fail_moderation
    console.log('\n5Ô∏è‚É£ Test avec WHERE sur fail_moderation...');
    try {
      const test5 = await executeQuery(`
        SELECT f.id, f.title, fm.status
        FROM fails f
        LEFT JOIN fail_moderation fm ON fm.fail_id = f.id
        WHERE (fm.status IS NULL OR fm.status = 'approved')
        LIMIT ?, ?`, [0, 2]);
      console.log(`‚úÖ Test 5 r√©ussi: ${test5.length} r√©sultats`);
    } catch (e) {
      console.log(`‚ùå Test 5 √©chou√©: ${e.message}`);
      return;
    }
    
    // Test 6: Ajouter les sous-requ√™tes reactions une par une
    console.log('\n6Ô∏è‚É£ Test avec sous-requ√™te reactions...');
    try {
      const test6 = await executeQuery(`
        SELECT f.id, f.title,
               (SELECT COUNT(*) FROM reactions fr WHERE fr.fail_id = f.id) as reactions_count
        FROM fails f
        LEFT JOIN fail_moderation fm ON fm.fail_id = f.id
        WHERE (fm.status IS NULL OR fm.status = 'approved')
        LIMIT ?, ?`, [0, 2]);
      console.log(`‚úÖ Test 6 r√©ussi: ${test6.length} r√©sultats`);
    } catch (e) {
      console.log(`‚ùå Test 6 √©chou√©: ${e.message}`);
      return;
    }
    
    // Test 7: Tester textProtocol option
    console.log('\n7Ô∏è‚É£ Test avec option textProtocol...');
    try {
      const test7 = await executeQuery(`
        SELECT f.id, f.title
        FROM fails f
        LIMIT ?, ?`, [0, 2], { textProtocol: true });
      console.log(`‚úÖ Test 7 r√©ussi: ${test7.length} r√©sultats avec textProtocol`);
    } catch (e) {
      console.log(`‚ùå Test 7 √©chou√©: ${e.message}`);
    }
    
    // Test 8: La requ√™te compl√®te de getPublicFails
    console.log('\n8Ô∏è‚É£ Test de la requ√™te compl√®te getPublicFails...');
    try {
      const test8 = await executeQuery(`
        SELECT f.*, p.display_name, p.avatar_url, fm.status AS moderation_status,
               (SELECT COUNT(*) FROM reactions fr WHERE fr.fail_id = f.id) as reactions_count,
               (SELECT COUNT(*) FROM reactions fr WHERE fr.fail_id = f.id AND fr.reaction_type = 'courage') as courage_count,
               (SELECT COUNT(*) FROM reactions fr WHERE fr.fail_id = f.id AND fr.reaction_type = 'empathy') as empathy_count,
               (SELECT COUNT(*) FROM reactions fr WHERE fr.fail_id = f.id AND fr.reaction_type = 'laugh')   as laugh_count,
               (SELECT COUNT(*) FROM reactions fr WHERE fr.fail_id = f.id AND fr.reaction_type = 'support') as support_count
        FROM fails f
        JOIN users u    ON f.user_id = u.id
        JOIN profiles p ON u.id = p.user_id
        LEFT JOIN fail_moderation fm ON fm.fail_id = f.id
        WHERE (fm.status IS NULL OR fm.status = 'approved')
        ORDER BY f.created_at DESC, f.id DESC
        LIMIT ?, ?`, [0, 2], { textProtocol: true });
      console.log(`‚úÖ Test 8 r√©ussi: ${test8.length} r√©sultats`);
    } catch (e) {
      console.log(`‚ùå Test 8 √©chou√©: ${e.message}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  } finally {
    process.exit();
  }
}

debugSQLIssue();
