const { executeQuery } = require('./src/config/database');

async function testLimitSyntax() {
  try {
    console.log('üîç Test des diff√©rentes syntaxes LIMIT...\n');
    
    // Test 1: LIMIT avec valeurs directes (pas de param√®tres)
    console.log('1Ô∏è‚É£ Test LIMIT avec valeurs directes...');
    try {
      const test1 = await executeQuery('SELECT id, title FROM fails LIMIT 2');
      console.log(`‚úÖ Test 1 r√©ussi: ${test1.length} r√©sultats`);
    } catch (e) {
      console.log(`‚ùå Test 1 √©chou√©: ${e.message}`);
    }
    
    // Test 2: LIMIT avec un seul param√®tre
    console.log('\n2Ô∏è‚É£ Test LIMIT avec un param√®tre...');
    try {
      const test2 = await executeQuery('SELECT id, title FROM fails LIMIT ?', [2]);
      console.log(`‚úÖ Test 2 r√©ussi: ${test2.length} r√©sultats`);
    } catch (e) {
      console.log(`‚ùå Test 2 √©chou√©: ${e.message}`);
    }
    
    // Test 3: LIMIT avec OFFSET s√©par√©s
    console.log('\n3Ô∏è‚É£ Test LIMIT ? OFFSET ?...');
    try {
      const test3 = await executeQuery('SELECT id, title FROM fails LIMIT ? OFFSET ?', [2, 0]);
      console.log(`‚úÖ Test 3 r√©ussi: ${test3.length} r√©sultats`);
    } catch (e) {
      console.log(`‚ùå Test 3 √©chou√©: ${e.message}`);
    }
    
    // Test 4: Version MySQL ancienne LIMIT offset, limit
    console.log('\n4Ô∏è‚É£ Test LIMIT offset, limit (syntaxe MySQL ancienne)...');
    try {
      const test4 = await executeQuery('SELECT id, title FROM fails LIMIT ?, ?', [0, 2]);
      console.log(`‚úÖ Test 4 r√©ussi: ${test4.length} r√©sultats`);
    } catch (e) {
      console.log(`‚ùå Test 4 √©chou√©: ${e.message}`);
    }
    
    // Test 5: Sans param√®tres pr√©par√©s
    console.log('\n5Ô∏è‚É£ Test construction de requ√™te sans param√®tres pr√©par√©s...');
    try {
      const limit = 2;
      const offset = 0;
      const query = `SELECT id, title FROM fails LIMIT ${offset}, ${limit}`;
      const test5 = await executeQuery(query);
      console.log(`‚úÖ Test 5 r√©ussi: ${test5.length} r√©sultats`);
    } catch (e) {
      console.log(`‚ùå Test 5 √©chou√©: ${e.message}`);
    }
    
    // Test 6: V√©rifier la version MySQL
    console.log('\n6Ô∏è‚É£ V√©rification version MySQL...');
    try {
      const version = await executeQuery('SELECT VERSION() as version');
      console.log(`MySQL Version: ${version[0].version}`);
    } catch (e) {
      console.log(`‚ùå Erreur version: ${e.message}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  } finally {
    process.exit();
  }
}

testLimitSyntax();
