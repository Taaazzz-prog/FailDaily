/**
 * üß™ TEST DE COMMUNICATION FRONTEND ‚Üí BACKEND
 * ==========================================
 * 
 * Script pour tester que le frontend peut bien communiquer avec le backend
 * apr√®s la restructuration du projet.
 */

const environment = {
  api: {
    baseUrl: 'http://localhost:3000/api'
  }
};

async function testFrontendBackendCommunication() {
  console.log('üß™ TEST DE COMMUNICATION FRONTEND ‚Üí BACKEND');
  console.log('===========================================\n');

  const baseUrl = environment.api.baseUrl;
  console.log(`üì° URL de base de l'API: ${baseUrl}\n`);

  try {
    // Test 1: Health Check
    console.log('1Ô∏è‚É£ Test Health Check...');
    const healthResponse = await fetch(`${baseUrl.replace('/api', '')}/health`);
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health Check:', healthData);
    console.log('');

    // Test 2: Test d'inscription (endpoint le plus complexe)
    console.log('2Ô∏è‚É£ Test Inscription utilisateur...');
    const registrationData = {
      email: `frontend-comm-test-${Date.now()}@example.com`,
      password: 'TestPassword123!',
      displayName: `FrontendTest${Date.now()}`,
      birthDate: '1990-05-15',
      agreeToTerms: true,
      agreeToNewsletter: false
    };

    const registerResponse = await fetch(`${baseUrl}/../api/registration/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(registrationData)
    });

    if (registerResponse.ok) {
      const registerData = await registerResponse.json();
      console.log('‚úÖ Inscription r√©ussie:', {
        success: registerData.success,
        userId: registerData.user?.id,
        email: registerData.user?.email
      });
    } else {
      const errorData = await registerResponse.text();
      console.log('‚ùå √âchec inscription:', registerResponse.status, errorData);
    }
    console.log('');

    // Test 3: Test de connexion avec les donn√©es pr√©c√©dentes
    console.log('3Ô∏è‚É£ Test Connexion utilisateur...');
    const loginData = {
      email: registrationData.email,
      password: registrationData.password
    };

    const loginResponse = await fetch(`${baseUrl}/../api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(loginData)
    });

    if (loginResponse.ok) {
      const loginResult = await loginResponse.json();
      console.log('‚úÖ Connexion r√©ussie:', {
        success: loginResult.success,
        hasToken: !!loginResult.token,
        userId: loginResult.user?.id
      });

      // Test 4: Test d'un endpoint prot√©g√©
      console.log('4Ô∏è‚É£ Test endpoint prot√©g√©...');
      const verifyResponse = await fetch(`${baseUrl}/auth/verify`, {
        headers: {
          'Authorization': `Bearer ${loginResult.token}`,
          'Accept': 'application/json'
        }
      });

      if (verifyResponse.ok) {
        const verifyData = await verifyResponse.json();
        console.log('‚úÖ V√©rification token r√©ussie:', {
          valid: verifyData.valid,
          userId: verifyData.user?.id
        });
      } else {
        console.log('‚ùå √âchec v√©rification token:', verifyResponse.status);
      }

    } else {
      const errorData = await loginResponse.text();
      console.log('‚ùå √âchec connexion:', loginResponse.status, errorData);
    }

    console.log('\nüéâ R√âSULTATS FINAUX');
    console.log('==================');
    console.log('‚úÖ Frontend ‚Üí Backend: Communication √©tablie');
    console.log('‚úÖ Ports configur√©s correctement');
    console.log('‚úÖ Endpoints accessibles');
    console.log('‚úÖ Authentification fonctionnelle');
    console.log('\nüí° Votre frontend enverra bien les donn√©es vers votre backend !');

  } catch (error) {
    console.error('‚ùå Erreur de communication:', error.message);
    console.log('\nüö® PROBL√àME D√âTECT√â');
    console.log('===================');
    console.log('‚ùå La communication frontend ‚Üí backend a √©chou√©');
    console.log('üí° V√©rifiez que le backend est bien d√©marr√© sur le port 3000');
  }
}

// Ex√©cution du test
testFrontendBackendCommunication();
